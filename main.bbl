% Generated by IEEEtran.bst, version: 1.12 (2007/01/11)
\begin{thebibliography}{10}
\providecommand{\url}[1]{#1}
\csname url@samestyle\endcsname
\providecommand{\newblock}{\relax}
\providecommand{\bibinfo}[2]{#2}
\providecommand{\BIBentrySTDinterwordspacing}{\spaceskip=0pt\relax}
\providecommand{\BIBentryALTinterwordstretchfactor}{4}
\providecommand{\BIBentryALTinterwordspacing}{\spaceskip=\fontdimen2\font plus
\BIBentryALTinterwordstretchfactor\fontdimen3\font minus
  \fontdimen4\font\relax}
\providecommand{\BIBforeignlanguage}[2]{{%
\expandafter\ifx\csname l@#1\endcsname\relax
\typeout{** WARNING: IEEEtran.bst: No hyphenation pattern has been}%
\typeout{** loaded for the language `#1'. Using the pattern for}%
\typeout{** the default language instead.}%
\else
\language=\csname l@#1\endcsname
\fi
#2}}
\providecommand{\BIBdecl}{\relax}
\BIBdecl

\bibitem{catal2009systematic}
C.~Catal and B.~Diri, ``A systematic review of software fault prediction
  studies,'' \emph{Expert systems with applications}, vol.~36, no.~4, pp.
  7346--7354, 2009.

\bibitem{jiang2013personalized}
T.~Jiang, L.~Tan, and S.~Kim, ``Personalized defect prediction,'' in \emph{2013
  28th IEEE/ACM International Conference on Automated Software Engineering
  (ASE)}.\hskip 1em plus 0.5em minus 0.4em\relax Ieee, 2013, pp. 279--289.

\bibitem{nam2014survey}
J.~Nam, ``Survey on software defect prediction,'' \emph{Department of Compter
  Science and Engineerning, The Hong Kong University of Science and Technology,
  Tech. Rep}, 2014.

\bibitem{maurice1977elements}
H.~H. Maurice, ``Elements of software science (operating and programming
  systems series),'' 1977.

\bibitem{mccabe1976complexity}
T.~J. McCabe, ``A complexity measure,'' \emph{IEEE Transactions on software
  Engineering}, no.~4, pp. 308--320, 1976.

\bibitem{wang2018deep}
S.~Wang, T.~Liu, J.~Nam, and L.~Tan, ``Deep semantic feature learning for
  software defect prediction,'' \emph{IEEE Transactions on Software
  Engineering}, 2018.

\bibitem{zhou2018far}
Y.~Zhou, Y.~Yang, H.~Lu, L.~Chen, Y.~Li, Y.~Zhao, J.~Qian, and B.~Xu, ``How far
  we have progressed in the journey? an examination of cross-project defect
  prediction,'' \emph{ACM Transactions on Software Engineering and Methodology
  (TOSEM)}, vol.~27, no.~1, pp. 1--51, 2018.

\bibitem{whua2020fcca}
W.~{Hua}, Y.~{Sui}, Y.~{Wan}, G.~{Liu}, and G.~{Xu}, ``Fcca: Hybrid code
  representation for functional clone detection using attention networks,''
  \emph{IEEE Transactions on Reliability}, pp. 1--15, 2020.

\bibitem{fan2019deep}
G.~Fan, X.~Diao, H.~Yu, K.~Yang, and L.~Chen, ``Deep semantic feature learning
  with embedded static metrics for software defect prediction,'' in \emph{2019
  26th Asia-Pacific Software Engineering Conference (APSEC)}.\hskip 1em plus
  0.5em minus 0.4em\relax IEEE, 2019, pp. 244--251.

\bibitem{li2017software}
J.~Li, P.~He, J.~Zhu, and M.~R. Lyu, ``Software defect prediction via
  convolutional neural network,'' in \emph{2017 IEEE International Conference
  on Software Quality, Reliability and Security (QRS)}.\hskip 1em plus 0.5em
  minus 0.4em\relax IEEE, 2017, pp. 318--328.

\bibitem{hinton2006fast}
G.~E. Hinton, S.~Osindero, and Y.-W. Teh, ``A fast learning algorithm for deep
  belief nets,'' \emph{Neural computation}, vol.~18, no.~7, pp. 1527--1554,
  2006.

\bibitem{mikolov2013distributed}
T.~Mikolov, I.~Sutskever, K.~Chen, G.~S. Corrado, and J.~Dean, ``Distributed
  representations of words and phrases and their compositionality,'' in
  \emph{Advances in neural information processing systems}, 2013, pp.
  3111--3119.

\bibitem{pennington2014glove}
J.~Pennington, R.~Socher, and C.~D. Manning, ``Glove: Global vectors for word
  representation,'' in \emph{Proceedings of the 2014 conference on empirical
  methods in natural language processing (EMNLP)}, 2014, pp. 1532--1543.

\bibitem{hochreiter1997long}
S.~Hochreiter and J.~Schmidhuber, ``Long short-term memory,'' \emph{Neural
  computation}, vol.~9, no.~8, pp. 1735--1780, 1997.

\bibitem{liang2019seml}
H.~Liang, Y.~Yu, L.~Jiang, and Z.~Xie, ``Seml: A semantic lstm model for
  software defect prediction,'' \emph{IEEE Access}, vol.~7, pp.
  83\,812--83\,824, 2019.

\bibitem{liu2018connecting}
Y.~Liu, Y.~Li, J.~Guo, Y.~Zhou, and B.~Xu, ``Connecting software metrics across
  versions to predict defects,'' in \emph{2018 IEEE 25th International
  Conference on Software Analysis, Evolution and Reengineering (SANER)}.\hskip
  1em plus 0.5em minus 0.4em\relax IEEE, 2018, pp. 232--243.

\bibitem{wang2018gated}
H.~Wang, X.~Zhang, B.~Liang, Q.~Zhou, and B.~Xu, ``Gated hierarchical lstms for
  target-based sentiment analysis,'' \emph{International Journal of Software
  Engineering and Knowledge Engineering}, vol.~28, no. 11n12, pp. 1719--1737,
  2018.

\bibitem{ni2019empirical}
C.~Ni, X.~Chen, F.~Wu, Y.~Shen, and Q.~Gu, ``An empirical study on pareto based
  multi-objective feature selection for software defect prediction,''
  \emph{Journal of Systems and Software}, vol. 152, pp. 215--238, 2019.

\bibitem{he2013learning}
Z.~He, F.~Peters, T.~Menzies, and Y.~Yang, ``Learning from open-source
  projects: An empirical study on defect prediction,'' in \emph{2013 ACM/IEEE
  International Symposium on Empirical Software Engineering and
  Measurement}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2013, pp. 45--54.

\bibitem{jing2014dictionary}
X.-Y. Jing, S.~Ying, Z.-W. Zhang, S.-S. Wu, and J.~Liu, ``Dictionary learning
  based software defect prediction,'' in \emph{Proceedings of the 36th
  International Conference on Software Engineering}, 2014, pp. 414--423.

\bibitem{chen2020different}
X.~Chen, Y.~Mu, Y.~Qu, C.~Ni, M.~Liu, T.~He, and S.~Liu, ``Do different
  cross-project defect prediction methods identify the same defective
  modules?'' \emph{Journal of Software: Evolution and Process}, vol.~32, no.~5,
  p. e2234, 2020.

\bibitem{jian2017dpcnn}
\BIBentryALTinterwordspacing
J.~Li, P.~He, J.~Zhu, and M.~R. Lyu, ``Software defect prediction via
  convolutional neural network,'' in \emph{2017 {IEEE} International Conference
  on Software Quality, Reliability and Security, {QRS} 2017, Prague, Czech
  Republic, July 25-29, 2017}.\hskip 1em plus 0.5em minus 0.4em\relax {IEEE},
  2017, pp. 318--328. [Online]. Available:
  \url{https://doi.org/10.1109/QRS.2017.42}
\BIBentrySTDinterwordspacing

\bibitem{jiang2008techniques}
Y.~Jiang, B.~Cukic, and Y.~Ma, ``Techniques for evaluating fault prediction
  models,'' \emph{Empirical Software Engineering}, vol.~13, no.~5, pp.
  561--595, 2008.

\bibitem{menzies2006data}
T.~Menzies, J.~Greenwald, and A.~Frank, ``Data mining static code attributes to
  learn defect predictors,'' \emph{IEEE transactions on software engineering},
  vol.~33, no.~1, pp. 2--13, 2006.

\bibitem{huang2017supervised}
Q.~Huang, X.~Xia, and D.~Lo, ``Supervised vs unsupervised models: A holistic
  look at effort-aware just-in-time defect prediction,'' in \emph{2017 IEEE
  International Conference on Software Maintenance and Evolution
  (ICSME)}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2017, pp. 159--170.

\bibitem{kamei2012large}
Y.~Kamei, E.~Shihab, B.~Adams, A.~E. Hassan, A.~Mockus, A.~Sinha, and
  N.~Ubayashi, ``A large-scale empirical study of just-in-time quality
  assurance,'' \emph{IEEE Transactions on Software Engineering}, vol.~39,
  no.~6, pp. 757--773, 2012.

\bibitem{huang2019revisiting}
Q.~Huang, X.~Xia, and D.~Lo, ``Revisiting supervised and unsupervised models
  for effort-aware just-in-time defect prediction,'' \emph{Empirical Software
  Engineering}, vol.~24, no.~5, pp. 2823--2862, 2019.

\bibitem{yang2016effort}
Y.~Yang, Y.~Zhou, J.~Liu, Y.~Zhao, H.~Lu, L.~Xu, B.~Xu, and H.~Leung,
  ``Effort-aware just-in-time defect prediction: simple unsupervised models
  could be better than supervised models,'' in \emph{Proceedings of the 2016
  24th ACM SIGSOFT International Symposium on Foundations of Software
  Engineering}, 2016, pp. 157--168.

\bibitem{kochhar2016practitioners}
P.~S. Kochhar, X.~Xia, D.~Lo, and S.~Li, ``Practitioners' expectations on
  automated fault localization,'' in \emph{Proceedings of the 25th
  International Symposium on Software Testing and Analysis}, 2016, pp.
  165--176.

\bibitem{mende2010effort}
T.~Mende and R.~Koschke, ``Effort-aware defect prediction models,'' in
  \emph{2010 14th European Conference on Software Maintenance and
  Reengineering}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2010, pp.
  107--116.

\bibitem{benjamini1995controlling}
Y.~Benjamini and Y.~Hochberg, ``Controlling the false discovery rate: a
  practical and powerful approach to multiple testing,'' \emph{Journal of the
  Royal statistical society: series B (Methodological)}, vol.~57, no.~1, pp.
  289--300, 1995.

\bibitem{jureczko2010towards}
M.~Jureczko and L.~Madeyski, ``Towards identifying software project clusters
  with regard to defect prediction,'' in \emph{Proceedings of the 6th
  international conference on predictive models in software engineering}, 2010,
  pp. 1--10.

\bibitem{jureczko2010using}
M.~Jureczko and D.~Spinellis, ``Using object-oriented design metrics to predict
  software defects,'' \emph{Models and Methods of System Dependability. Oficyna
  Wydawnicza Politechniki Wroc{\l}awskiej}, pp. 69--81, 2010.

\bibitem{phan2017convolutional}
A.~V. Phan, M.~Le~Nguyen, and L.~T. Bui, ``Convolutional neural networks over
  control flow graphs for software defect prediction,'' in \emph{2017 IEEE 29th
  International Conference on Tools with Artificial Intelligence
  (ICTAI)}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2017, pp. 45--52.

\bibitem{nagappan2010change}
N.~Nagappan, A.~Zeller, T.~Zimmermann, K.~Herzig, and B.~Murphy, ``Change
  bursts as defect predictors,'' in \emph{2010 IEEE 21st International
  Symposium on Software Reliability Engineering}.\hskip 1em plus 0.5em minus
  0.4em\relax IEEE, 2010, pp. 309--318.

\bibitem{nagappan2005use}
N.~Nagappan and T.~Ball, ``Use of relative code churn measures to predict
  system defect density,'' in \emph{Proceedings of the 27th international
  conference on Software engineering}, 2005, pp. 284--292.

\bibitem{elish2008predicting}
K.~O. Elish and M.~O. Elish, ``Predicting defect-prone software modules using
  support vector machines,'' \emph{Journal of Systems and Software}, vol.~81,
  no.~5, pp. 649--660, 2008.

\bibitem{wen2012systematic}
J.~Wen, S.~Li, Z.~Lin, Y.~Hu, and C.~Huang, ``Systematic literature review of
  machine learning based software development effort estimation models,''
  \emph{Information and Software Technology}, vol.~54, no.~1, pp. 41--59, 2012.

\bibitem{catal2009investigating}
C.~Catal and B.~Diri, ``Investigating the effect of dataset size, metrics sets,
  and feature selection techniques on software fault prediction problem,''
  \emph{Information Sciences}, vol. 179, no.~8, pp. 1040--1058, 2009.

\bibitem{ryu2016value}
D.~Ryu, O.~Choi, and J.~Baik, ``Value-cognitive boosting with a support vector
  machine for cross-project defect prediction,'' \emph{Empirical Software
  Engineering}, vol.~21, no.~1, pp. 43--71, 2016.

\bibitem{yang2015deep}
X.~Yang, D.~Lo, X.~Xia, Y.~Zhang, and J.~Sun, ``Deep learning for just-in-time
  defect prediction,'' in \emph{2015 IEEE International Conference on Software
  Quality, Reliability and Security}.\hskip 1em plus 0.5em minus 0.4em\relax
  IEEE, 2015, pp. 17--26.

\bibitem{kamei2007effects}
Y.~Kamei, A.~Monden, S.~Matsumoto, T.~Kakimoto, and K.-i. Matsumoto, ``The
  effects of over and under sampling on fault-prone module detection,'' in
  \emph{First International Symposium on Empirical Software Engineering and
  Measurement (ESEM 2007)}.\hskip 1em plus 0.5em minus 0.4em\relax IEEE, 2007,
  pp. 196--204.

\end{thebibliography}
